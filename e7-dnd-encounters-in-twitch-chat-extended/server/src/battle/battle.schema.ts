import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document } from 'mongoose';
import { IEvent, Joined } from '../domain/events';

@Schema({ timestamps: true, strict: false })
export class Battle {
  @Prop({
    type: [String],
    default: [],
    set: (event: IEvent[]) => JSON.stringify(event), // store as array of strings
    // HACKY! see BattleService's `private log` for details
    get: (e: string) => JSON.parse(e), // get as IEvent[]
  })
  public log: IEvent[] = [];

  public get party() {
    return (this.log.filter((e) => e.type === 'join') as Joined[]).map(
      (e) => e.member,
    );
  }

  /** autogenerated */
  @Prop()
  readonly createdAt?: Date;

  /** autogenerated */
  @Prop()
  readonly updatedAt?: Date;
}

export type BattleDocument = Battle & Document;
export const BattleSchema = SchemaFactory.createForClass(Battle);
BattleSchema.loadClass(Battle);
