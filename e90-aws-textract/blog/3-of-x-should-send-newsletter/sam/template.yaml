AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  should-send-newsletter

  Sample SAM Template for should-send-newsletter

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    # how long can the lambda functions run until they abort with an error
    Timeout: 3

Resources:
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Sub ${AWS::StackName}-api

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewaySubscribeRoute
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: "dev"

  ApiGatewaySubscribeRoute:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: subscribe
      RestApiId: !Ref ApiGateway

  ApiGatewaySubscribeReqBodyModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Description: Request body for the /subscribe route
      Name: SubscribeRequestBody
      RestApiId: !Ref ApiGateway
      Schema:
        $schema: "http://json-schema.org/draft-04/schema#"
        title: SubscribeRequestBodySchema
        type: object
        required:
          - email
          - privacyPolicyAcceptedAt
        properties:
          email:
            type: string
            pattern: '^\S+@\S+\.\S+$'
            description: "Email address to subscribe. Validation is best-effort but far from perfect"
          privacyPolicyAcceptedAt:
            type: string
            pattern: '^\d{4}(-\d\d(-\d\d(T\d\d:\d\d(:\d\d)?(\.\d+)?(([+-]\d\d:\d\d)|Z)?)?)?)?$'
            description: "ISO8601 timestamp in UTC timezone"

  ApiGatewawRequestBodyValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: RequestBodyValidator
      RestApiId: !Ref ApiGateway
      ValidateRequestBody: true
      ValidateRequestParameters: false

  ApiGatewawRequestParametersValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: RequestParametersValidator
      RestApiId: !Ref ApiGateway
      ValidateRequestBody: false
      ValidateRequestParameters: true

  ApiGatewayUnsubscribeRoute:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: unsubscribe
      RestApiId: !Ref ApiGateway

  ApiGatewayUnsubscribe2Route:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: unsubscribe2
      RestApiId: !Ref ApiGateway

  # Api endpoint GET /unsubscribe2?email=hello@example.com to unsubscribe from newsletter. It invokes the Unsubscribe Step Function State Machine, and returns a static HTML page to the client with Header Content-Type: text/html
  # After changing the code, don't forget to redeploy the API Gateway Deployment!
  ApiGatewayUnsubscribe2Method:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayUnsubscribe2Route
      HttpMethod: GET
      AuthorizationType: NONE
      # Step 1: Method Request, including validation of the query string parameters
      RequestParameters:
        method.request.querystring.email: true
      RequestValidatorId: !Ref ApiGatewawRequestParametersValidator
      # Step 2: Integration Request
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST # IMPORTANT! Step functions StartExecution API requires POST. Otherwise we get UnknownOperationException
        Credentials: !GetAtt ApiGatewayUnsubscribeSfnRole.Arn
        PassthroughBehavior: WHEN_NO_TEMPLATES
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:states:action/StartExecution
        # Step 2: Integration Request Mapping Template
        RequestTemplates:
          application/json: !Sub
            - |-
              #set($email = $util.escapeJavaScript($input.params('email')))
              { 
                "input": "{\"email\": \"$email\"}", 
                "stateMachineArn": "${StateMachineArn}"
              }
            - { StateMachineArn: !Ref UnsubscribeSfn }
        # Step 3 Integration Response, incl Mapping Template and headers
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Content-Type: "'text/html'"
            ResponseTemplates:
              application/json: |-
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta http-equiv="X-UA-Compatible" content="IE=edge">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Unsubscribe from Newsletter</title>
                </head>
                <body>
                    You are now unsubscribed.
                </body>
                </html>
      # Step 4: Method Response
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            text/html: Empty
          ResponseParameters:
            method.response.header.Content-Type: true

  ApiGatewaySubscribeMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      RequestModels:
        application/json: !Ref ApiGatewaySubscribeReqBodyModel
      RequestValidatorId: !Ref ApiGatewawRequestBodyValidator
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Credentials: !GetAtt ApiGatewaySubscribeSfnRole.Arn
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:states:action/StartExecution
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: !Sub
            - |-
              #set($data = $util.escapeJavaScript($input.json('$')))
              {
                "input": "$data",
                "stateMachineArn": "${StateMachineArn}"
              }
            - { StateMachineArn: !Ref SubscribeSfn }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewaySubscribeRoute
      RestApiId: !Ref ApiGateway

  ApiGatewayUnsubscribeMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      RequestParameters:
        method.request.querystring.email: true
      RequestValidatorId: !Ref ApiGatewawRequestParametersValidator
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Credentials: !GetAtt ApiGatewayUnsubscribeSfnRole.Arn
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:states:action/StartExecution
        PassthroughBehavior: WHEN_NO_TEMPLATES
        # TODO make it work for GET requests
        RequestTemplates:
          # Docs say: When the Content-Type header is absent in the request, API Gateway assumes that its default value is application/json
          application/json: !Sub
            - |-
              #set($email = $util.escapeJavaScript($input.params('email')))
              {
                "input": "{\"email\": \"$email\"}",
                "stateMachineArn": "${StateMachineArn}"
              }
            - { StateMachineArn: !Ref UnsubscribeSfn }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayUnsubscribeRoute
      RestApiId: !Ref ApiGateway

  ApiGatewaySubscribeSfnRole:
    Type: AWS::IAM::Role
    Properties:
      Path: !Join ["", ["/", !Ref "AWS::StackName", "/"]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowApiGatewayServiceToAssumeRole
            Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - apigateway.amazonaws.com
      Policies:
        - PolicyName: CallStepFunctions #TODO rename
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                Resource:
                  - !Ref SubscribeSfn

  ApiGatewayUnsubscribeSfnRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: StepFunctionsStartExecutionOfUnsubscribe
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !GetAtt UnsubscribeSfn.Arn

  ApiSubscribeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: StepFunctionsStartExecutionOfNewsletterSubscribe
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !GetAtt SubscribeSfn.Arn

  HttpApiUnsubscribeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: StepFunctionsStartExecutionOfNewsletterUnsubscribe
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !GetAtt UnsubscribeSfn.Arn

  SubscribeSfn:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: Subscribe
      DefinitionUri: state-machines/subscribe.asl.json
      DefinitionSubstitutions:
        ContactListName: !Ref NewsletterContactList
        EmailSource: !Ref SesIdentity
        WelcomeEmailTemplate: !Ref WelcomeEmailTemplate
      Policies:
        - Statement:
            - Sid: SESSendWelcomeEmail
              Effect: Allow
              Action:
                - ses:SendTemplatedEmail
              Resource:
                - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*"
                - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:template/${WelcomeEmailTemplate}"
            - Sid: SESCreateContact
              Effect: Allow
              Action:
                - ses:CreateContact
              Resource: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:contact-list/${NewsletterContactList}"
            - Sid: SESGetContact
              Effect: Allow
              Action:
                - ses:GetContact
              Resource: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:contact-list/${NewsletterContactList}"

  UnsubscribeSfn:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: Unsubscribe
      DefinitionUri: state-machines/unsubscribe.asl.json
      DefinitionSubstitutions:
        ContactListName: !Ref NewsletterContactList
      Policies:
        - Statement:
            - Sid: SESDeleteContact
              Effect: Allow
              Action:
                - ses:DeleteContact
              Resource: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:contact-list/${NewsletterContactList}"

  NewsletterSfn:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: NewsletterDaily
      #  TODO move to state-machines/
      DefinitionUri: newsletter.asl.json
      DefinitionSubstitutions:
        HasNewBlogArticleFunctionArn: !GetAtt HasNewBlogArticleFunction.Arn
        ChunkContactsFunctionArn: !GetAtt ChunkContactsFunction.Arn
        TransformToSendBulkEmailFunctionArn: !GetAtt TransformToSendBulkEmailFunction.Arn
        ContactListName: !Ref NewsletterContactList
      Events:
        Schedule:
          Type: Schedule # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#schedule
          Properties:
            Schedule: cron(0 4 * * ? *)
            Description: Invoke every day at 4am UTC
            Enabled: true
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref HasNewBlogArticleFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ChunkContactsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref TransformToSendBulkEmailFunction
        - Statement:
            - Sid: SESListContactsPolicy
              Effect: Allow
              Action:
                - ses:ListContacts
              Resource: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:contact-list/${NewsletterContactList}"
            - Sid: SESSendBulkEmailPolicy
              Effect: Allow
              Action:
                - ses:SendBulkEmail
              Resource:
                - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*"
                - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:template/${NewBlogArticleEmailTemplate}"
            - Sid: SESSendBulkTemplatedEmailPolicy
              Effect: Allow
              Action:
                - ses:SendBulkTemplatedEmail
              Resource:
                - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*"
                - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:template/${NewBlogArticleEmailTemplate}"

  HasNewBlogArticleFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: has-new-blog-article/
      Handler: app.lambdaHandler
      Environment:
        Variables:
          RSS_FEED_URL: "https://dev.to/rss"
      Runtime: nodejs16.x
      Architectures:
        - x86_64
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - app.ts

  ChunkContactsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: chunk-contacts/
      Handler: app.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          CHUNK_SIZE: "50"
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints:
          - app.ts

  TransformToSendBulkEmailFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: transform-to-send-bulk-email/
      Handler: app.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          TEMPLATE_ARN: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:template/${NewBlogArticleEmailTemplate}"
          FROM_EMAIL_ADDRESS: !Ref SesIdentity
          TEMPLATE_NAME: !Ref NewBlogArticleEmailTemplate
          API_GATEWAY_API_ID: "12345" # TODO
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints:
          - app.ts

  NewBlogArticleEmailTemplate:
    Type: AWS::SES::Template
    Properties:
      Template:
        TemplateName: NewBlogArticle
        SubjectPart: "New Article: {{articleTitle}}"
        HtmlPart: !Sub '<h1>New article:{{articleTitle}}</h1><p>Hi{{email}},</p><p>Thank you always for reading our blog.</p><p>We just finished another article that you might be interested in.</p><div style="padding: 16px;background:#1FD760;width:fit-content;border-radius: 30px;"> <a href="{{linkToArticle}}" style="color:#151E18;font-family:Helvetica, sans-serif;font-size:18px;font-weight:600;line-height:120%;Margin:0;text-decoration:none;text-transform:uppercase;" target="_blank"> Read the article now </a></div><p>Click here to <a href="https://{{apiGatewayApiId}}.execute-api.${AWS::Region}.amazonaws.com/unsubscribe?input=%7B%22email%22:%22{{email}}%22%7D"  target="_blank">unsubscribe</a>.</p>'
        TextPart: !Sub 'Hi {{email}}, Thank you always for reading our blog. We just finished another article "{{articleTitle}}" that you might be interested in. To read the article, copy the following link into your browsers address bar: {{linkToArticle}}. To unsubscribe, use the following link https://{{apiGatewayApiId}}.execute-api.${AWS::Region}.amazonaws.com/unsubscribe?input=%7B%22email%22:%22{{email}}%22%7D'

  WelcomeEmailTemplate:
    Type: AWS::SES::Template
    Properties:
      Template:
        TemplateName: Welcome
        SubjectPart: Welcome to the Newsletter
        HtmlPart: "<h1>Welcome to the Newsletter</h1><p>Hi {{email}},</><p>You will receive a new email whenever there is a new blog post.</p>"
        TextPart: "Welcome to the Newsletter. You will receive a new email whenever there is a new blog post."

  NewsletterContactList:
    Type: AWS::SES::ContactList
    DeletionPolicy: Delete
    Properties:
      ContactListName: EmailNewsletter
      Description: Creating a contact list example
      Topics:
        - TopicName: Newsletter
          DisplayName: Blog Post Newsletter
          Description: Never miss a new blog post by subscribing to our newsletter.
          DefaultSubscriptionStatus: OPT_OUT

  SesIdentity:
    Type: AWS::SES::EmailIdentity
    DeletionPolicy: Delete
    Properties:
      EmailIdentity: "typescriptteatime@gmail.com"

Outputs:
  EmailIdentity:
    Description: The email address used to send emails from
    Value: !Ref SesIdentity
  HasNewBlogArticleFunction:
    Description: "HasNewBlogArticle Lambda Function ARN"
    Value: !GetAtt HasNewBlogArticleFunction.Arn
  HasNewBlogArticleFunctionIamRole:
    Description: "Implicit IAM Role created for HasNewBlogArticle function"
    Value: !GetAtt HasNewBlogArticleFunctionRole.Arn
  NewsletterSfnArn:
    Description: "Blog Newsletter state machine ARN"
    Value: !Ref NewsletterSfn
  NewsletterSfnRole:
    Description: "IAM Role created for Blog Newsletter state machine based on the specified SAM Policy Templates"
    Value: !GetAtt NewsletterSfnRole.Arn
  ApiGatewayUrl:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev/"
